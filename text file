import cv2
import numpy as np
from matplotlib import pyplot as plt


img = cv2.imread('blank.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (5, 5), 0)
gray=np.float32(gray)

corners=cv2.goodFeaturesToTrack(gray,100,0.01,30)
corners=np.int0(corners)

for corner in corners:
    x,y=corner.ravel()
   # cv2.circle(img,(x,y),3,255,-1)
    
br = tuple(corners[0].ravel())
bl = tuple(corners[1].ravel())
tl = tuple(corners[2].ravel())
tr = tuple(corners[3].ravel())

print(t1)

cv2.line(img,br,bl, (0, 12, 255), 3)
cv2.line(img,bl,tl, (0, 12, 255), 3)
cv2.line(img,tr,tl, (0, 12, 255), 3)
cv2.line(img,tr,br, (0, 12, 255), 3)

def midpoint(pltA,pltB):
    return ((pltA[0] + pltB[0]) * 0.5, (pltA[1] + pltB[1]) * 0.5)

(tlblX, tlblY) = midpoint(tl,bl)
(trbrX, trbrY) = midpoint(tr,br)
(tltrX, tltrY) = midpoint(tl,tr)
(blbrX, blbrY) = midpoint(bl,br)
                          
D = dist.euclidean((tlblX, tlblY), (trbrX, trbrY))
D1 = dist.euclidean((tltrX, tltrY), (blbrX, blbrY))

cv2.line(img, (int(tltrX), int(tltrY)), (int(blbrX), int(blbrY)),(255, 0, 255), 2)
cv2.line(img, (int(tlblX), int(tlblY)), (int(trbrX), int(trbrY)),(255, 0, 255), 2)

print(D)
print(D1)

cv2.imshow('canny:',img)
cv2.waitKey(0)

#plt.show()
